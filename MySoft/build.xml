<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	default="compile"告诉Ant当在命令行键入ant无其它参数时，执行构建过程的compile步骤
	basedir="." 该构建文件内的全部其它路径都是相对于build.xml文件所在路径而言的
-->
<project name="MySoft" default="compile" basedir=".">
    <!-- 
    	命名相对目录有2个优点：
    	1.构建文件可以从任何目录下运行
    	2.构建文件易于维护
    -->
    <property name="build.dir" location="build" />
    <property name="build.prod.dir" location="${build.dir}/prod" />
    <property name="build.test.dir" location="${build.dir}/test" />
    <property name="doc.dir" location="doc" />
    <property name="index.dir" location="index" />
    <property name="src.dir" location="src" />
    <property name="test.dir" location="test" />
    <property name="vendor.lib.dir" location="vendor/lib" />
    <!-- 
    	<pathelement>向路径加入两个构建目录，以便java编译器找到所有类文件
    	<fileset>加入所有第三方jar文件
    -->
    <path id="project.classpath">
        <pathelement location="${build.prod.dir}"/>
        <pathelement location="${build.test.dir}"/>
        <fileset dir="${vendor.lib.dir}">
            <include name="*.jar" />
        </fileset>
    </path>
	<!-- 
		<mkdir>与命令行mkdir等效，但是可以工作于任何操作系统，必要时还会创建父目录
	-->
    <target name="prepare">
        <mkdir dir="${build.prod.dir}"/>
        <mkdir dir="${build.test.dir}"/>
    </target>
    <!-- 
    	 depends属性来声明与prepare目标的依存关系
    -->
    <target name="compile" depends="prepare">
        <javac srcdir="${src.dir}" destdir="${build.prod.dir}" includeantruntime="false">
            <classpath refid="project.classpath"/>
        </javac>
    </target>
	<!--
		编译测试源文件
	-->
	<target name="compile-tests" depends="compile">
		<javac srcdir="${test.dir}" destdir="${build.test.dir}">
			<classpath refid="project.classpath"/>
		</javac>
	</target>
	<target name="test" depends="compile-tests">
		<junit haltonfailure="true">
			<classpath refid="project.classpath"/>
			<!--
				使用brief类型来输出每个运行的测试案例的名称及其统计信息
				usefile="false"输出到控制台
			-->
			<formatter type="brief" usefile="false"/>
			<!-- 使用<batchtest>意味着不需要记住每个测试案例，测试文件的命名规格排上用场 -->
			<batchtest>
				<fileset dir="${build.test.dir}" includes="**/*Test.class"/>
			</batchtest>
			<sysproperty key="doc.dir" value="${doc.dir}"/>
			<sysproperty key="index.dir" value="${index.dir}"/>
		</junit>
	</target>
	<!-- 为了从头开始运行建构，检查建构是否确实完整和可重复的健全性 -->
	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>
</project>